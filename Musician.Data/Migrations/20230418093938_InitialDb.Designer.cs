// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Musician.Data.Concrete.EfCore.Context;

#nullable disable

namespace Musician.Data.Migrations
{
    [DbContext(typeof(MusicianContext))]
<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
    [Migration("20230428223307_InitialDb")]
========
    [Migration("20230418093938_InitialDb")]
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
========

                    b.HasData(
                        new
                        {
                            UserId = "e526230e-29de-43c6-a2b4-bd1e22479434",
                            RoleId = "df1e3c87-c998-44c6-9fdb-f7d191e0f502"
                        },
                        new
                        {
                            UserId = "dbcaee8a-6aed-4d64-88a2-0159950691d4",
                            RoleId = "eca23c28-9f4c-47e2-ab06-e4803bc8d3f8"
                        },
                        new
                        {
                            UserId = "a0738d4a-f1e8-4cbe-90dc-aa9de35f43f0",
                            RoleId = "2feb1920-6a64-4011-9bb4-872114d40811"
                        });
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EnstrumentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EnstrumentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NormalizedEnstrumentName")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnDescription")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("StudentId")
                        .HasColumnType("INTEGER");

<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

========
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs
                    b.HasKey("Id");

                    b.HasIndex("EnstrumentId");

                    b.HasIndex("ImageId");

<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
                    b.HasIndex("StudentId");

========
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs
                    b.HasIndex("TeacherId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "İstanbul",
                            Description = "Kaval dersi veriyorum",
                            EnstrumentName = "Kaval",
                            FirstName = "Ahmet",
                            NormalizedEnstrumentName = "",
                            Price = 250m
                        },
                        new
                        {
                            Id = 2,
                            City = "İstanbul",
                            Description = "Gitar dersi veriyorum",
                            EnstrumentName = "Gitar",
                            FirstName = "Mehmet",
                            NormalizedEnstrumentName = "",
                            Price = 270m
                        },
                        new
                        {
                            Id = 3,
                            City = "İstanbul",
                            Description = "Kalimba dersi veriyorum",
                            EnstrumentName = "Kalimba",
                            FirstName = "Ezgi",
                            NormalizedEnstrumentName = "",
                            Price = 240m
                        },
                        new
                        {
                            Id = 4,
                            City = "İstanbul",
                            Description = "Kaval dersi veriyorum",
                            EnstrumentName = "Kaval",
                            FirstName = "Arda",
                            NormalizedEnstrumentName = "",
                            Price = 250m
                        },
                        new
                        {
                            Id = 5,
                            City = "İstanbul",
                            Description = "Kaval dersi veriyorum",
                            EnstrumentName = "Kaval",
                            FirstName = "Erdi",
                            NormalizedEnstrumentName = "",
                            Price = 350m
                        },
                        new
                        {
                            Id = 6,
                            City = "İstanbul",
                            Description = "Kaval dersi veriyorum",
                            EnstrumentName = "Kaval",
                            FirstName = "Ulaş",
                            NormalizedEnstrumentName = "",
                            Price = 150m
                        },
                        new
                        {
                            Id = 7,
                            City = "İstanbul",
                            Description = "Kaval dersi veriyorum",
                            EnstrumentName = "Kaval",
                            FirstName = "Canan",
                            NormalizedEnstrumentName = "",
                            Price = 200m
                        },
                        new
                        {
                            Id = 8,
                            City = "İstanbul",
                            Description = "Kaval dersi veriyorum",
                            EnstrumentName = "Kaval",
                            FirstName = "İlknur",
                            NormalizedEnstrumentName = "",
                            Price = 400m
                        },
                        new
                        {
                            Id = 9,
                            City = "İstanbul",
                            Description = "Kaval dersi veriyorum",
                            EnstrumentName = "Kaval",
                            FirstName = "Hakan",
                            NormalizedEnstrumentName = "",
                            Price = 180m
                        });
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Enstrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEnstrumentName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Enstruments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsApproved = true,
                            Name = "Gitar",
                            NormalizedEnstrumentName = "",
                            Url = "gitar"
                        },
                        new
                        {
                            Id = 2,
                            IsApproved = true,
                            Name = "Keman",
                            NormalizedEnstrumentName = "",
                            Url = "keman"
                        },
                        new
                        {
                            Id = 3,
                            IsApproved = true,
                            Name = "Piyano",
                            NormalizedEnstrumentName = "",
                            Url = "piyano"
                        },
                        new
                        {
                            Id = 4,
                            IsApproved = true,
                            Name = "Bateri",
                            NormalizedEnstrumentName = "",
                            Url = "bateri"
                        },
                        new
                        {
                            Id = 5,
                            IsApproved = true,
                            Name = "Flüt",
                            NormalizedEnstrumentName = "",
                            Url = "flut"
                        },
                        new
                        {
                            Id = 6,
                            IsApproved = true,
                            Name = "Klarnet",
                            NormalizedEnstrumentName = "",
                            Url = "klarnet"
                        },
                        new
                        {
                            Id = 7,
                            IsApproved = true,
                            Name = "Çello",
                            NormalizedEnstrumentName = "",
                            Url = "cello"
                        },
                        new
                        {
                            Id = 8,
                            IsApproved = true,
                            Name = "Bağlama",
                            NormalizedEnstrumentName = "",
                            Url = "baglama"
                        },
                        new
                        {
                            Id = 9,
                            IsApproved = true,
                            Name = "Ud",
                            NormalizedEnstrumentName = "",
                            Url = "ud"
                        },
                        new
                        {
                            Id = 10,
                            IsApproved = true,
                            Name = "Kalimba",
                            NormalizedEnstrumentName = "",
                            Url = "kalimba"
                        });
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
                            Id = "ffda5227-6caa-4e01-ae23-a7226cc62aef",
========
                            Id = "df1e3c87-c998-44c6-9fdb-f7d191e0f502",
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs
                            Description = "Admin",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
                            Id = "3660a50e-5728-473c-92e9-914fde89d5ff",
========
                            Id = "eca23c28-9f4c-47e2-ab06-e4803bc8d3f8",
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs
                            Description = "Öğretmen",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
                            Id = "76bc560f-f5d2-4096-aa96-f05b90c7d5f5",
========
                            Id = "2feb1920-6a64-4011-9bb4-872114d40811",
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs
                            Description = "Öğrenci",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
                            Id = "7b9dcaf3-2089-46a5-980f-c7d486d616a5",
========
                            Id = "a06b49d5-7bf2-4fd0-a634-ac89181e3bf7",
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs
                            Description = "User",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
========
                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
========

                    b.HasData(
                        new
                        {
                            Id = "e526230e-29de-43c6-a2b4-bd1e22479434",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "e32aac48-8bb8-4fe0-8840-22f5b019964a",
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "asd",
                            District = "Beşiktaş",
                            Email = "ege@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ege",
                            Gender = "Erkek",
                            LastName = "ilk",
                            LockoutEnabled = false,
                            NormalizedEmail = "EGE@GMAIL.COM",
                            NormalizedUserName = "EGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEPPMpXtB8Ajxu805SyWx4motYCiST5cuQPk6z1v6x49CEXezaH07/22Q22K/9WioNA==",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            SecurityStamp = "e35afb53-d291-4859-b788-88564ce6fc29",
                            TwoFactorEnabled = false,
                            UserName = "ege"
                        },
                        new
                        {
                            Id = "dbcaee8a-6aed-4d64-88a2-0159950691d4",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "e387e1f1-e38b-49d3-ba41-f9c071d2cb8d",
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "asd",
                            District = "Kadıköy",
                            Email = "ece@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ece",
                            Gender = "Kadın",
                            LastName = "Orta",
                            LockoutEnabled = false,
                            NormalizedEmail = "ECE@GMAIL.COM",
                            NormalizedUserName = "ECE",
                            PasswordHash = "AQAAAAIAAYagAAAAELozV4WFY3cWJFcxcUt+4jLnQgxu41tvnDp4x0X9Z8fR9cgUOHTjdu4nCrLmNLV/Qw==",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            SecurityStamp = "3e3fade3-10fb-4a32-bc6e-640816ffcf0f",
                            TwoFactorEnabled = false,
                            UserName = "ece"
                        },
                        new
                        {
                            Id = "a0738d4a-f1e8-4cbe-90dc-aa9de35f43f0",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "1a1c34b3-48d8-4482-8df0-04109800e9f9",
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "asd",
                            District = "Bahçelievler",
                            Email = "efe@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Efe",
                            Gender = "Erkek",
                            LastName = "Son",
                            LockoutEnabled = false,
                            NormalizedEmail = "EFE@GMAIL.COM",
                            NormalizedUserName = "EFE",
                            PasswordHash = "AQAAAAIAAYagAAAAENxBpgNIj9rkL0MvF4uSHTOGoRAw2fdDjbq/ltietv4unlh6L24MVprJYxLStYlG2Q==",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            SecurityStamp = "382853b2-ba99-4df6-8318-52c1471ef5da",
                            TwoFactorEnabled = false,
                            UserName = "efe"
                        });
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
                    b.HasIndex("UserId")
                        .IsUnique();
========
                    b.HasIndex("UserId");
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderState")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
========
                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "İstanbul",
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "gitar öğrenmek istiyorum",
                            District = "Beşiktaş",
                            FirstName = "Şeyma",
                            Gender = "Kadın",
                            LastName = "Cankuş",
                            Url = "seyma-cankus"
                        },
                        new
                        {
                            Id = 2,
                            City = "İstanbul",
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "keman öğrenmek istiyorum",
                            District = "Beşiktaş",
                            FirstName = "Sema",
                            Gender = "Kadın",
                            LastName = "asd",
                            Url = "sema-asd"
                        },
                        new
                        {
                            Id = 3,
                            City = "İstanbul",
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "kalimba öğrenmek istiyorum",
                            District = "Beşiktaş",
                            FirstName = "Uğurcan",
                            Gender = "Erkek",
                            LastName = "Emare",
                            Url = "ugurcan-emare"
                        });
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs
                    b.Property<int?>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
========
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

========
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
                    b.HasIndex("ImageId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");
========
                    b.HasIndex("CardId");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "İstanbul",
                            CreatedDate = new DateTime(2023, 4, 18, 12, 39, 38, 367, DateTimeKind.Local).AddTicks(3374),
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kalimba çalıyorum",
                            District = "Beşiktaş",
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            IsApproved = true,
                            LastName = "Öçgüder",
                            PhoneNumber = "",
                            Status = "Home",
                            Url = "mehmetocguder",
                            UserName = "mehmetocguder"
                        },
                        new
                        {
                            Id = 2,
                            City = "İstanbul",
                            CreatedDate = new DateTime(2023, 4, 18, 12, 39, 38, 367, DateTimeKind.Local).AddTicks(3393),
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kalimba çalıyorum",
                            District = "Beşiktaş",
                            FirstName = "Canan",
                            Gender = "Kadın",
                            IsApproved = true,
                            LastName = "asd",
                            PhoneNumber = "",
                            Status = "Home",
                            Url = "canan",
                            UserName = "canan"
                        },
                        new
                        {
                            Id = 3,
                            City = "İstanbul",
                            CreatedDate = new DateTime(2023, 4, 18, 12, 39, 38, 367, DateTimeKind.Local).AddTicks(3410),
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kalimba çalıyorum",
                            District = "Beşiktaş",
                            FirstName = "Ezgi",
                            Gender = "Kadın",
                            IsApproved = true,
                            LastName = "sdf",
                            PhoneNumber = "",
                            Status = "Home",
                            Url = "ezgi",
                            UserName = "ezzgi"
                        },
                        new
                        {
                            Id = 4,
                            City = "İstanbul",
                            CreatedDate = new DateTime(2023, 4, 18, 12, 39, 38, 367, DateTimeKind.Local).AddTicks(3414),
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kalimba çalıyorum",
                            District = "Beşiktaş",
                            FirstName = "Arda",
                            Gender = "Erkek",
                            IsApproved = true,
                            LastName = "sss",
                            PhoneNumber = "",
                            Status = "Home",
                            Url = "arda",
                            UserName = "arda"
                        },
                        new
                        {
                            Id = 5,
                            City = "İstanbul",
                            CreatedDate = new DateTime(2023, 4, 18, 12, 39, 38, 367, DateTimeKind.Local).AddTicks(3417),
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kalimba çalıyorum",
                            District = "Beşiktaş",
                            FirstName = "Erdi",
                            Gender = "Erkek",
                            IsApproved = true,
                            LastName = "asdf",
                            PhoneNumber = "",
                            Status = "Home",
                            Url = "erdi",
                            UserName = "erdi"
                        },
                        new
                        {
                            Id = 6,
                            City = "İstanbul",
                            CreatedDate = new DateTime(2023, 4, 18, 12, 39, 38, 367, DateTimeKind.Local).AddTicks(3422),
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kalimba çalıyorum",
                            District = "Beşiktaş",
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            IsApproved = true,
                            LastName = "fgd",
                            PhoneNumber = "",
                            Status = "Home",
                            Url = "ahmet",
                            UserName = "ahmet"
                        });
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Musician.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Musician.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Musician.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Musician.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musician.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Musician.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Card", b =>
                {
                    b.HasOne("Musician.Entity.Concrete.Enstrument", "Enstrument")
                        .WithMany()
                        .HasForeignKey("EnstrumentId");

                    b.HasOne("Musician.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
                    b.HasOne("Musician.Entity.Concrete.Student", null)
                        .WithMany("Cards")
                        .HasForeignKey("StudentId");

                    b.HasOne("Musician.Entity.Concrete.Teacher", null)
                        .WithMany("Cards")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
========
                    b.HasOne("Musician.Entity.Concrete.Teacher", null)
                        .WithMany("Cards")
                        .HasForeignKey("TeacherId");
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs

                    b.Navigation("Enstrument");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Image", b =>
                {
                    b.HasOne("Musician.Entity.Concrete.Identity.User", "User")
<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
                        .WithOne("Image")
                        .HasForeignKey("Musician.Entity.Concrete.Image", "UserId");
========
                        .WithMany()
                        .HasForeignKey("UserId");
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs

                    b.Navigation("User");
                });

<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
            modelBuilder.Entity("Musician.Entity.Concrete.Request", b =>
                {
                    b.HasOne("Musician.Entity.Concrete.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Student", b =>
========
            modelBuilder.Entity("Musician.Entity.Concrete.Teacher", b =>
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs
                {
                    b.HasOne("Musician.Entity.Concrete.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.HasOne("Musician.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Musician.Entity.Concrete.Identity.User", "User")
<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
                        .WithOne("Student")
                        .HasForeignKey("Musician.Entity.Concrete.Student", "UserId");
========
                        .WithOne("Teacher")
                        .HasForeignKey("Musician.Entity.Concrete.Teacher", "UserId");
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs

                    b.Navigation("Card");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

<<<<<<<< HEAD:Musician.Data/Migrations/20230428223307_InitialDb.Designer.cs
            modelBuilder.Entity("Musician.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("Musician.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Musician.Entity.Concrete.Identity.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("Musician.Entity.Concrete.Teacher", "UserId");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Student", b =>
                {
                    b.Navigation("Cards");
========
            modelBuilder.Entity("Musician.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Teacher");
>>>>>>>> 5e78a95da77671fc536ce3dbf0d7cbdcd5348791:Musician.Data/Migrations/20230418093938_InitialDb.Designer.cs
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
