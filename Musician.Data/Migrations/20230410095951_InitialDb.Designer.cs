// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Musician.Data.Concrete.EfCore.Context;

#nullable disable

namespace Musician.Data.Migrations
{
    [DbContext(typeof(MusicianContext))]
    [Migration("20230410095951_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b8a4cd6b-db1f-404f-baa5-be3d9b4a0372",
                            RoleId = "b7abb49c-b349-4ac1-b232-4182d3ed37b6"
                        },
                        new
                        {
                            UserId = "d9255e07-1c79-4f66-b736-dd7a2cd94886",
                            RoleId = "975c0c42-d2c3-4ac1-8a73-5456041019f9"
                        },
                        new
                        {
                            UserId = "26307d8f-0b63-45f6-9d34-0d9d6cc46dd6",
                            RoleId = "cd3e99f0-f396-4266-bf36-c73f43848523"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EnstrumentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EnumState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Enstrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Enstruments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsApproved = true,
                            Name = "Gitar",
                            TeacherId = 0,
                            Url = "gitar"
                        },
                        new
                        {
                            Id = 2,
                            IsApproved = true,
                            Name = "Keman",
                            TeacherId = 0,
                            Url = "keman"
                        },
                        new
                        {
                            Id = 3,
                            IsApproved = true,
                            Name = "Piyano",
                            TeacherId = 0,
                            Url = "piyano"
                        },
                        new
                        {
                            Id = 4,
                            IsApproved = true,
                            Name = "Bateri",
                            TeacherId = 0,
                            Url = "bateri"
                        },
                        new
                        {
                            Id = 5,
                            IsApproved = true,
                            Name = "Flüt",
                            TeacherId = 0,
                            Url = "flut"
                        },
                        new
                        {
                            Id = 6,
                            IsApproved = true,
                            Name = "Klarnet",
                            TeacherId = 0,
                            Url = "klarnet"
                        },
                        new
                        {
                            Id = 7,
                            IsApproved = true,
                            Name = "Çello",
                            TeacherId = 0,
                            Url = "cello"
                        },
                        new
                        {
                            Id = 8,
                            IsApproved = true,
                            Name = "Bağlama",
                            TeacherId = 0,
                            Url = "baglama"
                        },
                        new
                        {
                            Id = 9,
                            IsApproved = true,
                            Name = "Ud",
                            TeacherId = 0,
                            Url = "ud"
                        },
                        new
                        {
                            Id = 10,
                            IsApproved = true,
                            Name = "Kalimba",
                            TeacherId = 0,
                            Url = "kalimba"
                        });
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b7abb49c-b349-4ac1-b232-4182d3ed37b6",
                            Description = "Admin",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "975c0c42-d2c3-4ac1-8a73-5456041019f9",
                            Description = "Öğretmen",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "cd3e99f0-f396-4266-bf36-c73f43848523",
                            Description = "Öğrenci",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b8a4cd6b-db1f-404f-baa5-be3d9b4a0372",
                            AccessFailedCount = 0,
                            Age = 16,
                            City = "İstanbul",
                            ConcurrencyStamp = "a3c7ec0b-f7ee-473f-93fb-28e5ff9d00c6",
                            Description = "asd",
                            District = "Beşiktaş",
                            Email = "ege@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ege",
                            Gender = "Erkek",
                            LastName = "ilk",
                            LockoutEnabled = false,
                            NormalizedEmail = "EGE@GMAIL.COM",
                            NormalizedUserName = "EGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEDxccHUlKqLBvIlBMjwvjQ999YNK2SZL+epr+7Zi4wP70RRRQ4R8ZkfHTuRqOXXv1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1b7f90c-dda3-4b41-8b1d-b80e346bedff",
                            TwoFactorEnabled = false,
                            UserName = "ege"
                        },
                        new
                        {
                            Id = "d9255e07-1c79-4f66-b736-dd7a2cd94886",
                            AccessFailedCount = 0,
                            Age = 32,
                            City = "İstanbul",
                            ConcurrencyStamp = "ed970cd1-1d17-4a10-973f-6d3a63eb6840",
                            Description = "asd",
                            District = "Kadıköy",
                            Email = "ece@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ece",
                            Gender = "Kadın",
                            LastName = "Orta",
                            LockoutEnabled = false,
                            NormalizedEmail = "ECE@GMAIL.COM",
                            NormalizedUserName = "ECE",
                            PasswordHash = "AQAAAAIAAYagAAAAEFmJEVL5qHpFbldm230ITit9BdbpN9nQRuvG+cxY2Nn6Mq/ls6/D1T1V09gmodoQNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b64fca60-7834-4933-bd2d-542badbc91ad",
                            TwoFactorEnabled = false,
                            UserName = "ece"
                        },
                        new
                        {
                            Id = "26307d8f-0b63-45f6-9d34-0d9d6cc46dd6",
                            AccessFailedCount = 0,
                            Age = 27,
                            City = "İstanbul",
                            ConcurrencyStamp = "cbf3a58c-4aed-4b9d-9d2c-efe833f5152e",
                            Description = "asd",
                            District = "Bahçelievler",
                            Email = "efe@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Efe",
                            Gender = "Erkek",
                            LastName = "Son",
                            LockoutEnabled = false,
                            NormalizedEmail = "EFE@GMAIL.COM",
                            NormalizedUserName = "EFE",
                            PasswordHash = "AQAAAAIAAYagAAAAEPcycaF+SzqIjUO0ILAF9IEmWgGx5A2seHqt27HDk+8WkEx3p4VxKBkwe6fHBxJgyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "425f7e4d-74aa-41a4-953b-2189d2513093",
                            TwoFactorEnabled = false,
                            UserName = "efe"
                        });
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 25,
                            City = "İstanbul",
                            Description = "gitar öğrenmek istiyorum",
                            District = "Beşiktaş",
                            FirstName = "Şeyma",
                            Gender = "Kadın",
                            LastName = "Cankuş",
                            Url = "seyma-cankus"
                        },
                        new
                        {
                            Id = 2,
                            Age = 25,
                            City = "İstanbul",
                            Description = "keman öğrenmek istiyorum",
                            District = "Beşiktaş",
                            FirstName = "Sema",
                            Gender = "Kadın",
                            LastName = "asd",
                            Url = "sema-asd"
                        },
                        new
                        {
                            Id = 3,
                            Age = 25,
                            City = "İstanbul",
                            Description = "kalimba öğrenmek istiyorum",
                            District = "Beşiktaş",
                            FirstName = "Uğurcan",
                            Gender = "Erkek",
                            LastName = "Emare",
                            Url = "ugurcan-emare"
                        });
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 27,
                            City = "İstanbul",
                            CreatedDate = new DateTime(2023, 4, 10, 12, 59, 51, 474, DateTimeKind.Local).AddTicks(8240),
                            Description = "Kalimba çalıyorum",
                            District = "Beşiktaş",
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            IsApproved = true,
                            LastName = "Öçgüder",
                            Status = "Home",
                            Url = "mehmetocguder"
                        },
                        new
                        {
                            Id = 2,
                            Age = 25,
                            City = "İstanbul",
                            CreatedDate = new DateTime(2023, 4, 10, 12, 59, 51, 474, DateTimeKind.Local).AddTicks(8273),
                            Description = "Kalimba çalıyorum",
                            District = "Beşiktaş",
                            FirstName = "Canan",
                            Gender = "Kadın",
                            IsApproved = true,
                            LastName = "asd",
                            Status = "Home",
                            Url = "canan"
                        },
                        new
                        {
                            Id = 3,
                            Age = 25,
                            City = "İstanbul",
                            CreatedDate = new DateTime(2023, 4, 10, 12, 59, 51, 474, DateTimeKind.Local).AddTicks(8279),
                            Description = "Kalimba çalıyorum",
                            District = "Beşiktaş",
                            FirstName = "Ezgi",
                            Gender = "Kadın",
                            IsApproved = true,
                            LastName = "sdf",
                            Status = "Home",
                            Url = "ezgi"
                        },
                        new
                        {
                            Id = 4,
                            Age = 22,
                            City = "İstanbul",
                            CreatedDate = new DateTime(2023, 4, 10, 12, 59, 51, 474, DateTimeKind.Local).AddTicks(8282),
                            Description = "Kalimba çalıyorum",
                            District = "Beşiktaş",
                            FirstName = "Arda",
                            Gender = "Erkek",
                            IsApproved = true,
                            LastName = "sss",
                            Status = "Home",
                            Url = "arda"
                        },
                        new
                        {
                            Id = 5,
                            Age = 24,
                            City = "İstanbul",
                            CreatedDate = new DateTime(2023, 4, 10, 12, 59, 51, 474, DateTimeKind.Local).AddTicks(8285),
                            Description = "Kalimba çalıyorum",
                            District = "Beşiktaş",
                            FirstName = "Erdi",
                            Gender = "Erkek",
                            IsApproved = true,
                            LastName = "asdf",
                            Status = "Home",
                            Url = "erdi"
                        },
                        new
                        {
                            Id = 6,
                            Age = 23,
                            City = "İstanbul",
                            CreatedDate = new DateTime(2023, 4, 10, 12, 59, 51, 474, DateTimeKind.Local).AddTicks(8288),
                            Description = "Kalimba çalıyorum",
                            District = "Beşiktaş",
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            IsApproved = true,
                            LastName = "fgd",
                            Status = "Home",
                            Url = "ahmet"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Musician.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Musician.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Musician.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Musician.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musician.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Musician.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Card", b =>
                {
                    b.HasOne("Musician.Entity.Concrete.Teacher", null)
                        .WithMany("Cards")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("Musician.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
